/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package stackbug

import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import java.lang.management.GarbageCollectorMXBean
import java.time.format.DateTimeFormatter
import kotlin.test.Test

class Symbol(rawSymbol: String): Comparable<Symbol> {
    private val format = DateTimeFormatter.ofPattern("yyMMdd")
    private val sss = DEFAULT_BUFFER_SIZE
    val xx = GarbageCollectorMXBean::class

    private val form1at = DateTimeFormatter.ofPattern("yyMMdd")
    private val s1ss = DEFAULT_BUFFER_SIZE
    val xx1 = GarbageCollectorMXBean::class

    override fun compareTo(other: Symbol): Int {
        return 1
    }

}
abstract class BaseThrowable(
    val description: String,
    val type: BaseThrowable.Type,
): Throwable() {
    enum class Type(
        val defaultCode: Symbol,
    ) {
        User(
            Symbol("TSLA")
        ),
        Server(
            Symbol("TSLA")
        ),
    }
}
open class MiddleThrowable(description: String) : BaseThrowable(
    description = description,
    type = Type.Server
)
class InheritedThrowable : MiddleThrowable("Badly formed request.")
// may require mutliple runs - these tests are not always consistent
class LibraryTest {
    @Test
    fun `NoClassDefFound BaseThrowable and done prints`() = runBlocking {
        // seems inconsistent: when this is the only test it becomes BaseThrowable
        // otherwise CoroutineExceptionHandlerImplKt
        bugged(871)
    }

    @Test
    fun `NoClassDefFound kotlinx_internal_PlatformImplementationsKt and done does not print`() = runBlocking {
        bugged(1000)
    }

    @Test
    fun `Never completes`() = runBlocking {
        bugged(100_000)
    }

    @Test
    fun `Completes normally`() = runBlocking {
        bugged(500)
    }

    private suspend fun bugged(repeats: Int) {
        class ThrowClass {
            init {
                runBlocking {
                    throw InheritedThrowable()
                }
            }
        }

        val a by lazy {
            ThrowClass()
        }

        var wi: String? = null
        coroutineScope {
            repeat(repeats) {
                launch {
                    try {
                        a.toString()
                    } catch (t: Throwable) {
                        runBlocking {
                            wi = t.stackTrace.size.toString()
                        }
                        runBlocking {
                            val wa = t.stackTrace.size.toString()
                            wi = wa
                        }
                    }
                }
            }
        }
        println("done")
        println(InheritedThrowable().javaClass.classLoader)
        println(wi)
    }
}
